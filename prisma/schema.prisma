// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Partner {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  apiEndpoint String
  lastFetched DateTime?
  syncLogs    SyncLog[]
}

model Product {
  id        Int    @id @default(autoincrement())
  productId Int    @unique()
  days      String
}

model Slots {
  providerSlotId  String            @id
  productId       Int
  startTime       String
  startDate       String
  remaining       Int
  paxAvailibility PaxAvailibility[]

  @@unique([productId, startDate, startTime]) // Ensure uniqueness
}

model PaxAvailibility {
  id          Int     @id @default(autoincrement())
  slotId      String
  remaining   Int
  type        String
  name        String?
  description String
  min         Int?
  max         Int?
  Slots       Slots   @relation(fields: [slotId], references: [providerSlotId], onDelete: Cascade)
  price       Price?   

  @@unique([slotId, type])
  @@index([slotId, type])
}

model Price {
  id              Int              @id
  finalPrice      Int
  currencyCode    String
  originalPrice   Int
  PaxAvailibility PaxAvailibility @relation(fields: [id], references: [id],onDelete: Cascade)
}

model SyncLog {
  id           Int       @id @default(autoincrement())
  partner      Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId    Int
  syncStarted  DateTime  @default(now())
  syncFinished DateTime?
  status       String    @default("pending")
  errorMessage String?
}
