// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Partner {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  apiEndpoint String
  lastFetched DateTime?
  syncLogs    SyncLog[]
}

model Product {
  id Int @id @default(autoincrement())
  productId Int @unique()
  days String 
}

model Slots {
  id              Int               @id @default(autoincrement())
  productId       Int
  startTime       String
  startDate       String
  remaining       Int
  paxAvailibility PaxAvailibility[]
  
  @@unique([productId, startDate, startTime]) // Ensure uniqueness
  @@index([productId, startDate, startTime])  // Indexing for fast lookups
}

model PaxAvailibility {
  id          Int     @id @default(autoincrement())
  type        String
  name        String?
  description String?
  price       Price   @relation(fields: [priceId], references: [id])
  Slots       Slots?  @relation(fields: [slotsId], references: [id])
  slotsId     Int?
  priceId     Int
}

model Price {
  id              Int               @id @default(autoincrement())
  finalPrice      Int
  currencyCode    String
  originalPrice   Int
  PaxAvailibility PaxAvailibility[]
}

model SyncLog {
  id           Int       @id @default(autoincrement())
  partner      Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId    Int
  syncStarted  DateTime  @default(now())
  syncFinished DateTime?
  status       String    @default("pending")
  errorMessage String?
}
